// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let score = 0;
let clickValue = 1;
let passiveIncome = 0;
let totalClicks = 0;
let gameTimeSeconds = 0; 

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
let settings = {
    tilt3D: true,
    clickEffects: true,
    sounds: true, 
    deviceType: null // 'mobile', 'desktop', –∏–ª–∏ null
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É–∑—ã–∫–∏
let musicPlayed = false;

// –£–ª—É—á—à–µ–Ω–∏—è
const upgrades = [
    { id: 1, name: "–£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü", baseCost: 10, cost: 10, level: 0, effect: 1, description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 1" },
    { id: 2, name: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä", baseCost: 50, cost: 50, level: 0, effect: 1, description: "–î–æ–±–∞–≤–ª—è–µ—Ç 1 –æ—á–∫–æ –≤ —Å–µ–∫—É–Ω–¥—É" },
    { id: 3, name: "–ó–æ–ª–æ—Ç–æ–π –ø–∞–ª–µ—Ü", baseCost: 200, cost: 200, level: 0, effect: 5, description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 5" },
    { id: 4, name: "–§–∞–±—Ä–∏–∫–∞ –∫–ª–∏–∫–æ–≤", baseCost: 1000, cost: 1000, level: 0, effect: 10, description: "–î–æ–±–∞–≤–ª—è–µ—Ç 10 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É" }
];

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const achievements = [
    { id: 1, clicks: 10, unlocked: false },
    { id: 2, clicks: 50, unlocked: false },
    { id: 3, clicks: 100, unlocked: false },
    { id: 4, clicks: 500, unlocked: false }
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const scoreElement = document.getElementById('score');
const clickValueElement = document.getElementById('click-value');
const passiveIncomeElement = document.getElementById('passive-income');
const clickArea = document.getElementById('click-area');
const bubaContainer = document.getElementById('buba-container');
const buba = document.getElementById('buba');
const bubaImage = document.getElementById('buba-image');
const header = document.getElementById('header');
const stats = document.getElementById('stats');
const totalClicksDisplay = document.getElementById('total-clicks-display');
const playTimeDisplay = document.getElementById('play-time');
const toggle3D = document.getElementById('toggle-3d');
const toggleEffects = document.getElementById('toggle-effects');
const toggleSounds = document.getElementById('toggle-sounds');
const gameMusic = document.getElementById('game-music'); 
const tiltInstruction = document.getElementById('tilt-instruction'); 

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–µ–Ω—é
const upgradesSection = document.getElementById('upgrades-section');
const achievementsSection = document.getElementById('achievements-section');
const settingsSection = document.getElementById('settings-section');
const menuButtons = document.querySelectorAll('.menu-button');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const deviceSelectModal = document.getElementById('device-select-modal');
const selectMobileButton = document.getElementById('select-mobile');
const selectDesktopButton = document.getElementById('select-desktop');
const deviceTypeDisplay = document.getElementById('device-type-display');

// --- –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–í–£–ö–û–ú ---
function toggleMusic(play) {
    if (play) {
        const playPromise = gameMusic.play();
        if (playPromise !== undefined) {
            playPromise.then(_ => {
                gameMusic.volume = 0.3; 
                musicPlayed = true;
            }).catch(error => {
                console.log("–ú—É–∑—ã–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–æ–º.");
                musicPlayed = false;
            });
        }
    } else {
        gameMusic.pause();
        musicPlayed = false;
    }
    settings.sounds = play;
}
// ---------------------------------

// --- –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ---
function showSection(sectionId) {
    const sections = [upgradesSection, achievementsSection, settingsSection];
    const targetSection = document.getElementById(sectionId);

    sections.forEach(section => {
        section.classList.remove('active');
    });
    menuButtons.forEach(button => {
        button.classList.remove('active');
    });

    if (targetSection) {
        targetSection.classList.add('active');
        document.getElementById(`menu-${sectionId.replace('-section', '')}`).classList.add('active');
    }
}
// ---------------------------------------------

function recalculateAllStats() {
    let newClickValue = 1;
    let newPassiveIncome = 0;
    
    upgrades.forEach(upgrade => {
        if (upgrade.id === 1 || upgrade.id === 3) {
            newClickValue += upgrade.level * upgrade.effect;
        } else if (upgrade.id === 2 || upgrade.id === 4) {
            newPassiveIncome += upgrade.level * upgrade.effect;
        }
    });
    
    clickValue = newClickValue;
    passiveIncome = newPassiveIncome;
    updateDisplay();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(title, message) {
    const notificationArea = document.getElementById('notification-area');
    if (!notificationArea) return;
    
    notificationArea.classList.remove('show', 'hide');
    
    notificationArea.innerHTML = '';
    
    notificationArea.innerHTML = `
        <div class="notification-title">${title}</div>
        <div class="notification-message">${message}</div>
    `;
    
    setTimeout(() => { notificationArea.classList.add('show'); }, 50);
    
    setTimeout(() => {
        notificationArea.classList.remove('show');
        notificationArea.classList.add('hide');
    }, 3000);
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è 3D –Ω–∞–∫–ª–æ–Ω–∞
let tiltEffectListener = null;
let mouseLeaveListener = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–µ–≥–∫–æ–≥–æ 3D –Ω–∞–∫–ª–æ–Ω–∞
function initTiltEffect() {
    if (tiltEffectListener) { document.removeEventListener('mousemove', tiltEffectListener); }
    if (mouseLeaveListener) { document.removeEventListener('mouseleave', mouseLeaveListener); }
    
    bubaContainer.style.transform = 'rotateY(0deg) rotateX(0deg)';
    header.style.transform = 'rotateY(0deg) rotateX(0deg)';
    stats.style.transform = 'rotateY(0deg) rotateX(0deg)';
    bubaImage.style.transform = 'translateX(0px) translateY(0px)';
    
    if (settings.tilt3D && settings.deviceType === 'desktop') { // 3D —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        if (tiltInstruction) tiltInstruction.style.display = 'block';

        tiltEffectListener = (e) => {
            const { clientX: x, clientY: y } = e;
            const { innerWidth: width, innerHeight: height } = window;
            
            const xPos = (x / width - 0.5) * 2;
            const yPos = (y / height - 0.5) * 2;
            
            const bubaRotateY = xPos * 2;
            const bubaRotateX = -yPos * 2;
            bubaContainer.style.transform = `rotateY(${bubaRotateY}deg) rotateX(${bubaRotateX}deg)`;
            
            const elementRotateY = xPos * 0.5;
            const elementRotateX = -yPos * 0.5;
            header.style.transform = `rotateY(${elementRotateY}deg) rotateX(${elementRotateX}deg)`;
            stats.style.transform = `rotateY(${elementRotateY}deg) rotateX(${elementRotateX}deg)`;
            
            const imageMoveX = xPos * 3;
            const imageMoveY = yPos * 3;
            bubaImage.style.transform = `translateX(${imageMoveX}px) translateY(${imageMoveY}px)`;
        };

        mouseLeaveListener = () => {
            bubaContainer.style.transform = 'rotateY(0deg) rotateX(0deg)';
            header.style.transform = 'rotateY(0deg) rotateX(0deg)';
            stats.style.transform = 'rotateY(0deg) rotateX(0deg)';
            bubaImage.style.transform = 'translateX(0px) translateY(0px)';
        };

        document.addEventListener('mousemove', tiltEffectListener);
        document.addEventListener('mouseleave', mouseLeaveListener);
    } else {
        if (tiltInstruction) tiltInstruction.style.display = 'none';
    }
}

// --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–´–ë–û–†–ê –£–°–¢–†–û–ô–°–¢–í–ê ---
function applyDeviceSettings(deviceType) {
    settings.deviceType = deviceType;
    document.body.classList.remove('mobile-mode', 'desktop-mode');
    
    if (deviceType === 'mobile') {
        document.body.classList.add('mobile-mode');
        settings.tilt3D = false; // –û—Ç–∫–ª—é—á–∞–µ–º 3D –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    } else {
        // –î–µ—Å–∫—Ç–æ–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    }
    
    updateToggleDisplays();
    saveProgress();
}

function handleDeviceSelection(deviceType) {
    applyDeviceSettings(deviceType);
    deviceSelectModal.classList.remove('active'); 
    
    const message = deviceType === 'mobile' ? '–†–µ–∂–∏–º "–¢–µ–ª–µ—Ñ–æ–Ω" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π.' : '–†–µ–∂–∏–º "–ö–æ–º–ø—å—é—Ç–µ—Ä" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.';
    showNotification(`–í—ã–±—Ä–∞–Ω–æ: ${deviceType === 'mobile' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : '–ö–æ–º–ø—å—é—Ç–µ—Ä'}`, message);
}

window.showDeviceSelectionModal = function() {
    deviceSelectModal.classList.add('active');
    showNotification('–°–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.');
}
// ------------------------------------

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∏ –¥–∏—Å–ø–ª–µ—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function updateToggleDisplays() {
    toggle3D.checked = settings.tilt3D;
    toggleEffects.checked = settings.clickEffects;
    toggleSounds.checked = settings.sounds;
    
    const deviceName = settings.deviceType === 'mobile' ? '–¢–µ–ª–µ—Ñ–æ–Ω üì±' : (settings.deviceType === 'desktop' ? '–ö–æ–º–ø—å—é—Ç–µ—Ä üíª' : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    deviceTypeDisplay.textContent = deviceName;

    if (settings.deviceType === 'mobile') {
        toggle3D.disabled = true; // –ó–∞–ø—Ä–µ—â–∞–µ–º 3D –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    } else {
        toggle3D.disabled = false;
    }

    toggleMusic(settings.sounds); 
    initTiltEffect();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function handleImageError() {
    const bubaContent = document.querySelector('.buba-content');
    bubaContent.innerHTML = `
        <div style="width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; background: linear-gradient(135deg, #FFD700, #FFA500); border-radius: 15px;">
            <div style="font-size: 5rem;">üòä</div>
            <div style="margin-top: 10px; font-weight: bold; color: #333; font-size: 2rem;">–ë–£–ë–ê</div>
            <div style="position: absolute; bottom: 20px; left: 0; right: 0; background: linear-gradient(transparent, rgba(0,0,0,0.7)); padding: 15px; border-radius: 0 0 15px 15px;">
                <div style="font-weight: bold; color: #FFD700; font-size: 1.5rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">–ö–õ–ò–ö–ê–ô –ù–ê –ú–ï–ù–Ø!</div>
            </div>
        </div>
    `;
}

// –§–£–ù–ö–¶–ò–Ø –ö–õ–ò–ö–ê (–û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê) - –ó–ê–ú–ï–ù–ê handleClick
function handleMainTap(event) {
    // 1. –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –î–í–û–ô–ù–û–ì–û –ö–õ–ò–ö–ê / –ó–ê–¢–û–†–ú–û–ñ–ï–ù–ù–û–ì–û –ö–õ–ò–ö–ê –ù–ê –ú–û–ë–ò–õ–¨–ù–û–ú
    // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É —Å—Ä–∞–∑—É –ø–æ touchstart –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å click
    if (event.type === 'touchstart' || event.type === 'mousedown') {
        event.preventDefault(); 
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ click-area
    if (event.target !== clickArea && event.target.closest('#click-area') !== clickArea) {
        return;
    }
    
    // 2. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ì–†–´
    score += clickValue;
    totalClicks++;
    updateDisplay();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π touch)
    let clientX, clientY;
    if (event.touches && event.touches.length > 0) {
        clientX = event.changedTouches[0].clientX;
        clientY = event.changedTouches[0].clientY;
    } else {
        clientX = event.clientX;
        clientY = event.clientY;
    }

    if (settings.clickEffects && clientX && clientY) {
        createClickEffect(clientX, clientY, `+${clickValue}`);
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
    buba.style.transform = 'scale(0.95)';
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ touchend/mouseup
    
    checkAchievements();
    upgrades.forEach(upgrade => upgrade.updateDisplay());

    if (settings.sounds && !musicPlayed) {
         toggleMusic(true);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞
function createClickEffect(x, y, text) {
    const effect = document.createElement('div');
    effect.className = 'click-effect';
    effect.textContent = text;
    
    const offsetX = Math.random() * 40 - 20; 
    const offsetY = Math.random() * 40 - 20;

    effect.style.left = `${x + offsetX}px`;
    effect.style.top = `${y + offsetY}px`;
    
    document.body.appendChild(effect);
    
    setTimeout(() => { effect.remove(); }, 1000);
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = upgrades.find(u => u.id === upgradeId);
    
    if (score >= upgrade.cost) {
        score -= upgrade.cost;
        
        upgrade.level++;
        
        upgrade.cost = upgrade.baseCost * Math.pow(1.5, upgrade.level);
        
        recalculateAllStats(); 
        
        upgrade.updateDisplay();
        showNotification('–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!', `"${upgrade.name}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ!`);
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤', '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ DOM
function updateAchievementDisplay() {
    achievements.forEach(achievement => {
        const element = document.getElementById(`achievement-${achievement.id}`);
        const progressElement = element.querySelector('.achievement-progress');
        
        if (achievement.unlocked) {
            element.classList.add('unlocked');
            progressElement.textContent = `${achievement.clicks} –∫–ª–∏–∫–æ–≤ (–í–´–ü–û–õ–ù–ï–ù–û)`;
        } else {
            element.classList.remove('unlocked');
            progressElement.textContent = `${achievement.clicks} –∫–ª–∏–∫–æ–≤`;
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    let unlocked = false;
    
    achievements.forEach(achievement => {
        if (!achievement.unlocked && totalClicks >= achievement.clicks) {
            achievement.unlocked = true;
            unlocked = true;
            
            const reward = achievement.clicks * 2;
            score += reward;
            
            showNotification('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!', `${achievement.clicks} –∫–ª–∏–∫–æ–≤! +${reward} –æ—á–∫–æ–≤`);
        }
    });
    
    if (unlocked) {
        updateDisplay();
        updateAchievementDisplay();
        upgrades.forEach(upgrade => upgrade.updateDisplay());
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    scoreElement.textContent = Math.floor(score);
    clickValueElement.textContent = clickValue;
    passiveIncomeElement.textContent = passiveIncome;
    totalClicksDisplay.textContent = totalClicks;
    playTimeDisplay.textContent = gameTimeSeconds;
    
    upgrades.forEach(upgrade => upgrade.updateDisplay());
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
    const gameData = {
        score,
        totalClicks,
        gameTimeSeconds,
        settings, 
        upgrades: upgrades.map(upgrade => ({
            id: upgrade.id,
            level: upgrade.level,
            cost: upgrade.cost
        })),
        achievements: achievements.map(achievement => ({
            id: achievement.id,
            unlocked: achievement.unlocked
        }))
    };
    
    localStorage.setItem('bubaClickerSave', JSON.stringify(gameData));
    console.log("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
    const savedData = localStorage.getItem('bubaClickerSave');
    if (savedData) {
        try {
            const gameData = JSON.parse(savedData);
            
            score = gameData.score || 0;
            totalClicks = gameData.totalClicks || 0;
            gameTimeSeconds = gameData.gameTimeSeconds || 0;
            
            if (gameData.settings) { settings = {...settings, ...gameData.settings}; }
            
            if (gameData.upgrades) {
                gameData.upgrades.forEach(savedUpgrade => {
                    const upgrade = upgrades.find(u => u.id === savedUpgrade.id);
                    if (upgrade) {
                        upgrade.level = savedUpgrade.level || 0;
                        upgrade.cost = savedUpgrade.cost || upgrade.baseCost;
                    }
                });
            }
            
            if (gameData.achievements) {
                gameData.achievements.forEach(savedAchievement => {
                    const achievement = achievements.find(a => a.id === savedAchievement.id);
                    if (achievement) {
                        achievement.unlocked = savedAchievement.unlocked || false;
                    }
                });
            }
            
            recalculateAllStats();
            
            upgrades.forEach(upgrade => upgrade.updateDisplay());
            updateAchievementDisplay();
            updateToggleDisplays();
            
            if (settings.deviceType) {
                applyDeviceSettings(settings.deviceType);
            }
            
            // showNotification('–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω', '–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'); // –£–±—Ä–∞–Ω–æ, —Ç.–∫. –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ—Å—à—É–º–Ω–æ–π
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            // showNotification('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ'); // –£–±—Ä–∞–Ω–æ
            recalculateAllStats();
            updateToggleDisplays();
        }
    } else {
        recalculateAllStats();
        updateAchievementDisplay();
        updateToggleDisplays();
    }
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')) {
        localStorage.removeItem('bubaClickerSave');
        
        const deviceType = settings.deviceType; 
        
        score = 0;
        totalClicks = 0;
        gameTimeSeconds = 0;

        settings = { tilt3D: true, clickEffects: true, sounds: true, deviceType: deviceType };
        
        upgrades.forEach(upgrade => {
            upgrade.level = 0;
            upgrade.cost = upgrade.baseCost;
        });
        
        achievements.forEach(achievement => {
            achievement.unlocked = false;
        });
        
        recalculateAllStats();
        upgrades.forEach(upgrade => upgrade.updateDisplay());
        updateAchievementDisplay();
        updateToggleDisplays();
        applyDeviceSettings(deviceType); 
        
        showNotification('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞', '–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É–¥–∞–ª–µ–Ω!');
    }
}

// –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
function passiveIncomeTick() {
    if (passiveIncome > 0) {
        score += passiveIncome / 10; // –¢–∏–∫–∞–µ–º 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        updateDisplay();
    }
}

// –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
function gameTimerTick() {
    gameTimeSeconds++;
    playTimeDisplay.textContent = gameTimeSeconds;
}

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ ---
function initGame() {
    
    bubaImage.onerror = handleImageError;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π updateDisplay)
    upgrades.forEach(upgrade => {
        const element = document.getElementById(`upgrade-${upgrade.id}`);
        const costElement = document.getElementById(`cost-${upgrade.id}`);
        const levelElement = document.getElementById(`level-${upgrade.id}`);
        
        element.addEventListener('click', function() {
            buyUpgrade(upgrade.id);
        });
        
        // –û–ë–ù–û–í–õ–ï–ù–û: –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–î–°–í–ï–¢–ö–ò –£–õ–£–ß–®–ï–ù–ò–ô
        upgrade.updateDisplay = function() {
            costElement.textContent = Math.floor(this.cost);
            levelElement.textContent = this.level;
            
            if (score >= this.cost) {
                element.classList.add('can-buy'); // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
                element.classList.remove('disabled');
            } else {
                element.classList.remove('can-buy'); // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
                element.classList.add('disabled');
            }
        };
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    document.getElementById('menu-upgrades').addEventListener('click', () => {
        showSection('upgrades-section');
    });
    document.getElementById('menu-achievements').addEventListener('click', () => {
        showSection('achievements-section');
    });
    document.getElementById('menu-settings').addEventListener('click', () => {
        showSection('settings-section');
    });

    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–õ–ò–ö–û–í/–¢–ê–ü–û–í ---
    
    // 1. –ú–æ–±–∏–ª—å–Ω—ã–π (touchstart/touchend): touchstart –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É, touchend –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
    clickArea.addEventListener('touchstart', handleMainTap, { passive: false });
    clickArea.addEventListener('touchend', () => buba.style.transform = 'scale(1)');
    
    // 2. –î–µ—Å–∫—Ç–æ–ø (mousedown/mouseup): mousedown –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É, mouseup –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
    clickArea.addEventListener('mousedown', (e) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ touch event, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        if (e.pointerType !== 'touch') {
            handleMainTap(e);
        }
    });
    clickArea.addEventListener('mouseup', () => buba.style.transform = 'scale(1)');
    clickArea.addEventListener('mouseleave', () => buba.style.transform = 'scale(1)'); // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –º—ã—à—å —É—à–ª–∞
    
    // –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö clickArea.addEventListener('click', handleClick); –£–î–ê–õ–ï–ù.
    // –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò –¢–û–ñ–ï –£–î–ê–õ–ï–ù–´/–ó–ê–ú–ï–ù–ï–ù–´.
    // ----------------------------------------------------------------------

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—Å–±—Ä–æ—Å–∞ 
    document.getElementById('reset-button').addEventListener('click', function() {
        resetGame();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    toggle3D.addEventListener('change', function() {
        settings.tilt3D = this.checked;
        initTiltEffect();
        saveProgress();
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', `3D —ç—Ñ—Ñ–µ–∫—Ç ${this.checked ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    });

    toggleEffects.addEventListener('change', function() {
        settings.clickEffects = this.checked;
        saveProgress();
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', `–≠—Ñ—Ñ–µ–∫—Ç—ã –∫–ª–∏–∫–æ–≤ ${this.checked ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
    });

    toggleSounds.addEventListener('change', function() {
        toggleMusic(this.checked);
        saveProgress();
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', `–ó–≤—É–∫–∏/–ú—É–∑—ã–∫–∞ ${this.checked ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    selectMobileButton.addEventListener('click', () => handleDeviceSelection('mobile'));
    selectDesktopButton.addEventListener('click', () => handleDeviceSelection('desktop'));

    // --- –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ò –í–´–•–û–î–ï ---
    window.addEventListener('beforeunload', saveProgress);
    window.addEventListener('pagehide', saveProgress); 

    loadProgress(); 
    
    if (!settings.deviceType) {
        deviceSelectModal.classList.add('active'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    } else {
        applyDeviceSettings(settings.deviceType); // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ
    }
    
    showSection('upgrades-section');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    setInterval(saveProgress, 30000); 
    setInterval(passiveIncomeTick, 100); // 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    setInterval(gameTimerTick, 1000); 
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initGame);
