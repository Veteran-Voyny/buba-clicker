[file name]: script.js
[file content begin]
// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let score = 0;
let clickValue = 1;
let passiveIncome = 0;
let totalClicks = 0;
let gameTimeSeconds = 0; 

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
let settings = {
    clickEffects: true,
    sounds: true
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É–∑—ã–∫–∏
let musicPlayed = false;

// –£–ª—É—á—à–µ–Ω–∏—è
const upgrades = [
    { id: 1, name: "–£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü", baseCost: 10, cost: 10, level: 0, effect: 1, description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 1" },
    { id: 2, name: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä", baseCost: 50, cost: 50, level: 0, effect: 1, description: "–î–æ–±–∞–≤–ª—è–µ—Ç 1 –æ—á–∫–æ –≤ —Å–µ–∫—É–Ω–¥—É" },
    { id: 3, name: "–ó–æ–ª–æ—Ç–æ–π –ø–∞–ª–µ—Ü", baseCost: 200, cost: 200, level: 0, effect: 5, description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –∫–ª–∏–∫ –Ω–∞ 5" },
    { id: 4, name: "–§–∞–±—Ä–∏–∫–∞ –∫–ª–∏–∫–æ–≤", baseCost: 1000, cost: 1000, level: 0, effect: 10, description: "–î–æ–±–∞–≤–ª—è–µ—Ç 10 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É" }
];

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const achievements = [
    { id: 1, clicks: 10, unlocked: false },
    { id: 2, clicks: 50, unlocked: false },
    { id: 3, clicks: 100, unlocked: false },
    { id: 4, clicks: 500, unlocked: false }
];

// –ü—Ä–æ–º–æ–∫–æ–¥—ã (—Å–∫—Ä—ã—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const promocodes = {
    "START100": { reward: 100, used: false },
    "BOOST500": { reward: 500, used: false },
    "GOLD1000": { reward: 1000, used: false },
    "CLICK2000": { reward: 2000, used: false },
    "BUBAMAX": { reward: 5000, used: false }
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const scoreElement = document.getElementById('score');
const clickValueElement = document.getElementById('click-value');
const passiveIncomeElement = document.getElementById('passive-income');
const clickArea = document.getElementById('click-area');
const buba = document.querySelector('.buba');
const totalClicksDisplay = document.getElementById('total-clicks-display');
const playTimeDisplay = document.getElementById('play-time');
const toggleEffects = document.getElementById('toggle-effects');
const toggleSounds = document.getElementById('toggle-sounds');
const gameMusic = document.getElementById('game-music');

// --- –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–í–£–ö–û–ú ---
function toggleMusic(play) {
    if (play) {
        gameMusic.volume = 0.3;
        gameMusic.play().catch(() => {
            console.log("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
        });
        musicPlayed = true;
    } else {
        gameMusic.pause();
        musicPlayed = false;
    }
    settings.sounds = play;
}

// --- –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ---
function showSection(sectionId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.menu-button').forEach(button => {
        button.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.add('active');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        const menuButton = document.getElementById(`menu-${sectionId.replace('-section', '')}`);
        if (menuButton) {
            menuButton.classList.add('active');
        }
    }
}

function recalculateAllStats() {
    let newClickValue = 1;
    let newPassiveIncome = 0;
    
    upgrades.forEach(upgrade => {
        if (upgrade.id === 1 || upgrade.id === 3) {
            newClickValue += upgrade.level * upgrade.effect;
        } else if (upgrade.id === 2 || upgrade.id === 4) {
            newPassiveIncome += upgrade.level * upgrade.effect;
        }
    });
    
    clickValue = newClickValue;
    passiveIncome = newPassiveIncome;
    updateDisplay();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(title, message) {
    const notificationArea = document.getElementById('notification-area');
    if (!notificationArea) return;
    
    notificationArea.classList.remove('show', 'hide');
    notificationArea.innerHTML = `
        <div class="notification-title">${title}</div>
        <div class="notification-message">${message}</div>
    `;
    
    setTimeout(() => notificationArea.classList.add('show'), 50);
    setTimeout(() => {
        notificationArea.classList.remove('show');
        notificationArea.classList.add('hide');
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function handleImageError() {
    const bubaContent = document.querySelector('.buba-content');
    bubaContent.innerHTML = `
        <div style="width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; background: linear-gradient(135deg, #FFD700, #FFA500); border-radius: 50%;">
            <div style="font-size: 3rem;">üòä</div>
            <div style="margin-top: 5px; font-weight: bold; color: #333; font-size: 1.2rem;">–ë–£–ë–ê</div>
            <div style="position: absolute; bottom: 10px; left: 0; right: 0; background: linear-gradient(transparent, rgba(0,0,0,0.7)); padding: 8px; border-radius: 0 0 50% 50%;">
                <div style="font-weight: bold; color: #FFD700; font-size: 0.9rem;">–ö–õ–ò–ö–ê–ô –ù–ê –ú–ï–ù–Ø!</div>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –∫–ª–∏–∫–∞
function handleBubaClick(event) {
    let clientX, clientY;
    
    if (event.type === 'touchstart' || event.type === 'touchend') {
        const touch = event.touches[0] || event.changedTouches[0];
        clientX = touch.clientX;
        clientY = touch.clientY;
    } else {
        clientX = event.clientX;
        clientY = event.clientY;
    }
    
    score += clickValue;
    totalClicks++;
    updateDisplay();
    
    if (settings.clickEffects) {
        createClickEffect(clientX, clientY, `+${clickValue}`);
    }
    
    buba.style.transform = 'scale(0.95)';
    setTimeout(() => { buba.style.transform = 'scale(1)'; }, 100);
    
    checkAchievements();
    upgrades.forEach(upgrade => upgrade.updateDisplay());

    if (settings.sounds && !musicPlayed) {
         toggleMusic(true);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞
function createClickEffect(x, y, text) {
    const effect = document.createElement('div');
    effect.className = 'click-effect';
    effect.textContent = text;
    
    const offsetX = Math.random() * 40 - 20; 
    const offsetY = Math.random() * 40 - 20;

    effect.style.left = `${x + offsetX}px`;
    effect.style.top = `${y + offsetY}px`;
    
    document.body.appendChild(effect);
    
    setTimeout(() => effect.remove(), 1000);
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = upgrades.find(u => u.id === upgradeId);
    
    if (score >= upgrade.cost) {
        score -= upgrade.cost;
        upgrade.level++;
        upgrade.cost = upgrade.baseCost * Math.pow(1.5, upgrade.level);
        
        recalculateAllStats(); 
        upgrade.updateDisplay();
        showNotification('–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!', `"${upgrade.name}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ!`);
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤', '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è');
    }
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
function activatePromocode() {
    const promocodeInput = document.getElementById('promocode-input');
    const code = promocodeInput.value.trim().toUpperCase();
    
    if (!code) {
        showNotification('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥');
        return;
    }
    
    if (promocodes[code]) {
        if (promocodes[code].used) {
            showNotification('–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω', '–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } else {
            const reward = promocodes[code].reward;
            score += reward;
            promocodes[code].used = true;
            
            updateDisplay();
            showNotification('–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', `+${reward} –æ—á–∫–æ–≤!`);
            promocodeInput.value = '';
            saveProgress();
        }
    } else {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ DOM
function updateAchievementDisplay() {
    achievements.forEach(achievement => {
        const element = document.getElementById(`achievement-${achievement.id}`);
        if (!element) return;
        
        element.classList.toggle('unlocked', achievement.unlocked);
        
        const progressElement = element.querySelector('.achievement-progress');
        if (progressElement) {
            progressElement.textContent = `${achievement.clicks} –∫–ª–∏–∫–æ–≤`;
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    achievements.forEach(achievement => {
        if (!achievement.unlocked && totalClicks >= achievement.clicks) {
            achievement.unlocked = true;
            showNotification('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!', `+${achievement.clicks * 2} –æ—á–∫–æ–≤!`);
            score += achievement.clicks * 2;
            updateAchievementDisplay();
            updateDisplay();
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    scoreElement.textContent = Math.floor(score);
    clickValueElement.textContent = clickValue;
    passiveIncomeElement.textContent = passiveIncome;
    totalClicksDisplay.textContent = totalClicks;
    playTimeDisplay.textContent = gameTimeSeconds;
}

// –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
function passiveIncomeTick() {
    score += passiveIncome;
    updateDisplay();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
    const progress = {
        score,
        clickValue,
        passiveIncome,
        totalClicks,
        gameTimeSeconds,
        upgrades,
        achievements,
        promocodes,
        settings
    };
    localStorage.setItem('bubaClickerProgress', JSON.stringify(progress));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
    const savedProgress = localStorage.getItem('bubaClickerProgress');
    if (savedProgress) {
        const progress = JSON.parse(savedProgress);
        
        score = progress.score || 0;
        clickValue = progress.clickValue || 1;
        passiveIncome = progress.passiveIncome || 0;
        totalClicks = progress.totalClicks || 0;
        gameTimeSeconds = progress.gameTimeSeconds || 0;
        
        if (progress.upgrades) {
            upgrades.forEach(upgrade => {
                const savedUpgrade = progress.upgrades.find(u => u.id === upgrade.id);
                if (savedUpgrade) {
                    upgrade.level = savedUpgrade.level || 0;
                    upgrade.cost = savedUpgrade.cost || upgrade.baseCost;
                }
            });
        }
        
        if (progress.achievements) {
            achievements.forEach(achievement => {
                const savedAchievement = progress.achievements.find(a => a.id === achievement.id);
                if (savedAchievement) {
                    achievement.unlocked = savedAchievement.unlocked || false;
                }
            });
        }
        
        if (progress.promocodes) {
            Object.keys(promocodes).forEach(code => {
                if (progress.promocodes[code]) {
                    promocodes[code].used = progress.promocodes[code].used || false;
                }
            });
        }
        
        if (progress.settings) {
            settings = { ...settings, ...progress.settings };
        }
        
        recalculateAllStats();
        updateAchievementDisplay();
        updateDisplay();
        
        if (settings.sounds) {
            toggleMusic(true);
        }
    }
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        localStorage.removeItem('bubaClickerProgress');
        location.reload();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    loadProgress();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    upgrades.forEach(upgrade => {
        const element = document.getElementById(`upgrade-${upgrade.id}`);
        if (!element) return;
        
        upgrade.updateDisplay = function() {
            const costElement = document.getElementById(`cost-${upgrade.id}`);
            const levelElement = document.getElementById(`level-${upgrade.id}`);
            
            if (costElement) costElement.textContent = Math.floor(upgrade.cost);
            if (levelElement) levelElement.textContent = upgrade.level;
            
            element.classList.toggle('can-buy', score >= upgrade.cost);
            element.classList.toggle('disabled', score < upgrade.cost);
        };
        
        element.addEventListener('click', () => buyUpgrade(upgrade.id));
        upgrade.updateDisplay();
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    updateAchievementDisplay();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    clickArea.addEventListener('click', handleBubaClick);
    clickArea.addEventListener('touchstart', handleBubaClick, { passive: true });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('menu-upgrades').addEventListener('click', () => showSection('upgrades-section'));
    document.getElementById('menu-achievements').addEventListener('click', () => showSection('achievements-section'));
    document.getElementById('menu-promocodes').addEventListener('click', () => showSection('promocodes-section'));
    document.getElementById('menu-settings').addEventListener('click', () => showSection('settings-section'));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    document.getElementById('activate-promocode').addEventListener('click', activatePromocode);
    document.getElementById('promocode-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') activatePromocode();
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
    document.getElementById('reset-button').addEventListener('click', resetGame);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    toggleEffects.checked = settings.clickEffects;
    toggleSounds.checked = settings.sounds;
    
    toggleEffects.addEventListener('change', () => {
        settings.clickEffects = toggleEffects.checked;
        saveProgress();
    });
    
    toggleSounds.addEventListener('change', () => {
        settings.sounds = toggleSounds.checked;
        if (settings.sounds) {
            toggleMusic(true);
        } else {
            toggleMusic(false);
        }
        saveProgress();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const bubaImage = document.getElementById('buba-image');
    if (bubaImage) {
        bubaImage.addEventListener('error', handleImageError);
    }
    
    // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    setInterval(passiveIncomeTick, 1000);
    setInterval(() => {
        gameTimeSeconds++;
        playTimeDisplay.textContent = gameTimeSeconds;
        saveProgress();
    }, 1000);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', initGame);
[file content end]
